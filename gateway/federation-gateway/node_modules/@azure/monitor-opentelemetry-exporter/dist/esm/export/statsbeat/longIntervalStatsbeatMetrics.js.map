{"version":3,"file":"longIntervalStatsbeatMetrics.js","sourceRoot":"","sources":["../../../../src/export/statsbeat/longIntervalStatsbeatMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  BatchObservableResult,\n  ObservableGauge,\n  ObservableResult,\n  Meter,\n} from \"@opentelemetry/api\";\nimport { diag } from \"@opentelemetry/api\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { ExportResultCode } from \"@opentelemetry/core\";\nimport type { PeriodicExportingMetricReaderOptions } from \"@opentelemetry/sdk-metrics\";\nimport { MeterProvider, PeriodicExportingMetricReader } from \"@opentelemetry/sdk-metrics\";\nimport type { AzureMonitorExporterOptions } from \"../../index.js\";\nimport * as ai from \"../../utils/constants/applicationinsights.js\";\nimport { StatsbeatMetrics } from \"./statsbeatMetrics.js\";\nimport type {\n  CommonStatsbeatProperties,\n  AttachStatsbeatProperties,\n  StatsbeatOptions,\n} from \"./types.js\";\nimport { StatsbeatCounter, STATSBEAT_LANGUAGE, StatsbeatFeatureType } from \"./types.js\";\nimport { AzureMonitorStatsbeatExporter } from \"./statsbeatExporter.js\";\nimport { getAttachType } from \"../../utils/metricUtils.js\";\n\n/**\n * Long Interval Statsbeat Metrics\n * @internal\n */\nexport class LongIntervalStatsbeatMetrics extends StatsbeatMetrics {\n  private static instance: LongIntervalStatsbeatMetrics | null = null;\n  private statsCollectionLongInterval: number = 86400000; // 1 day\n  // Custom dimensions\n  private cikey: string;\n  private runtimeVersion: string;\n  private language: string;\n  private version: string;\n  private attach: string = getAttachType();\n\n  private commonProperties: CommonStatsbeatProperties;\n  private attachProperties: AttachStatsbeatProperties;\n\n  private feature: number = 0;\n  private instrumentation: number = 0;\n\n  private longIntervalStatsbeatMeterProvider: MeterProvider;\n  private longIntervalAzureExporter: AzureMonitorStatsbeatExporter;\n  private longIntervalMetricReader: PeriodicExportingMetricReader;\n  private longIntervalStatsbeatMeter: Meter;\n\n  // Network Attributes\n  private connectionString: string;\n\n  // Observable Gauges\n  private featureStatsbeatGauge: ObservableGauge;\n  private attachStatsbeatGauge: ObservableGauge;\n\n  public isInitialized: boolean = false;\n\n  constructor(options: StatsbeatOptions) {\n    super();\n    this.connectionString = super.getConnectionString(options.endpointUrl);\n    const exporterConfig: AzureMonitorExporterOptions = {\n      connectionString: this.connectionString,\n      disableOfflineStorage: options.disableOfflineStorage,\n    };\n\n    this.setFeatures();\n\n    this.longIntervalAzureExporter = new AzureMonitorStatsbeatExporter(exporterConfig);\n    // Export Long Interval Statsbeats every day\n    const longIntervalMetricReaderOptions: PeriodicExportingMetricReaderOptions = {\n      exporter: this.longIntervalAzureExporter,\n      exportIntervalMillis:\n        Number(process.env.LONG_INTERVAL_EXPORT_MILLIS) || this.statsCollectionLongInterval, // 1 day\n    };\n\n    this.longIntervalMetricReader = new PeriodicExportingMetricReader(\n      longIntervalMetricReaderOptions,\n    );\n    this.longIntervalStatsbeatMeterProvider = new MeterProvider({\n      readers: [this.longIntervalMetricReader],\n    });\n    this.longIntervalStatsbeatMeter = this.longIntervalStatsbeatMeterProvider.getMeter(\n      \"Azure Monitor Long Interval Statsbeat\",\n    );\n\n    // Assign Common Properties\n    this.runtimeVersion = process.version;\n    this.language = STATSBEAT_LANGUAGE;\n    this.version = ai.packageVersion;\n    this.cikey = options.instrumentationKey;\n\n    this.featureStatsbeatGauge = this.longIntervalStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.FEATURE,\n    );\n    this.attachStatsbeatGauge = this.longIntervalStatsbeatMeter.createObservableGauge(\n      StatsbeatCounter.ATTACH,\n    );\n    this.isInitialized = true;\n    this.initialize();\n\n    this.commonProperties = {\n      os: this.os,\n      rp: this.resourceProvider,\n      cikey: this.cikey,\n      runtimeVersion: this.runtimeVersion,\n      language: this.language,\n      version: this.version,\n      attach: this.attach,\n    };\n\n    this.attachProperties = {\n      rpId: this.resourceIdentifier,\n    };\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      await this.getResourceProvider();\n\n      // Add long interval observable callbacks\n      this.attachStatsbeatGauge.addCallback(this.attachCallback.bind(this));\n      this.longIntervalStatsbeatMeter.addBatchObservableCallback(\n        this.getEnvironmentStatus.bind(this),\n        [this.featureStatsbeatGauge],\n      );\n\n      // Export Feature/Attach Statsbeat once upon app initialization after 15 second delay\n      setTimeout(async () => {\n        try {\n          const collectionResult = await this.longIntervalMetricReader.collect();\n          if (collectionResult) {\n            this.longIntervalAzureExporter.export(\n              collectionResult.resourceMetrics,\n              (result: ExportResult) => {\n                if (result.code !== ExportResultCode.SUCCESS) {\n                  diag.debug(\n                    `LongIntervalStatsbeat: metrics export failed (error ${result.error})`,\n                  );\n                }\n              },\n            );\n          } else {\n            diag.debug(\"LongIntervalStatsbeat: No metrics collected\");\n          }\n        } catch (error) {\n          diag.debug(`LongIntervalStatsbeat: Error collecting metrics: ${error}`);\n        }\n      }, 15000); // 15 seconds\n    } catch (error) {\n      diag.debug(\"Call to get the resource provider failed.\");\n    }\n  }\n\n  private getEnvironmentStatus(observableResult: BatchObservableResult): void {\n    this.setFeatures();\n    let attributes;\n    // Only send instrumentation statsbeat if value is greater than zero\n    if (this.instrumentation > 0) {\n      attributes = {\n        ...this.commonProperties,\n        feature: this.instrumentation,\n        type: StatsbeatFeatureType.INSTRUMENTATION,\n      };\n      observableResult.observe(this.featureStatsbeatGauge, 1, { ...attributes });\n    }\n\n    // Only send feature statsbeat if value is greater than zero\n    if (this.feature > 0) {\n      attributes = {\n        ...this.commonProperties,\n        feature: this.feature,\n        type: StatsbeatFeatureType.FEATURE,\n      };\n      observableResult.observe(this.featureStatsbeatGauge, 1, { ...attributes });\n    }\n  }\n\n  private setFeatures(): void {\n    const statsbeatFeatures = process.env.AZURE_MONITOR_STATSBEAT_FEATURES;\n    if (statsbeatFeatures) {\n      try {\n        this.feature = JSON.parse(statsbeatFeatures).feature;\n        this.instrumentation = JSON.parse(statsbeatFeatures).instrumentation;\n      } catch (error: any) {\n        diag.debug(\n          `LongIntervalStatsbeat: Failed to parse features/instrumentations (error ${error})`,\n        );\n      }\n    }\n  }\n\n  private attachCallback(observableResult: ObservableResult): void {\n    const attributes = { ...this.commonProperties, ...this.attachProperties };\n    observableResult.observe(1, attributes);\n  }\n\n  public shutdown(): Promise<void> {\n    return this.longIntervalStatsbeatMeterProvider.shutdown();\n  }\n  /**\n   * Singleton LongIntervalStatsbeatMetrics instance.\n   * @internal\n   */\n  public static getInstance(options: StatsbeatOptions): LongIntervalStatsbeatMetrics {\n    if (!LongIntervalStatsbeatMetrics.instance) {\n      LongIntervalStatsbeatMetrics.instance = new LongIntervalStatsbeatMetrics(options);\n    }\n    return LongIntervalStatsbeatMetrics.instance;\n  }\n}\n"]}