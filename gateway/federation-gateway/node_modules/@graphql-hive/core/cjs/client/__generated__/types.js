"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageRateLimitType = exports.TargetAccessScope = exports.SupportTicketStatus = exports.SupportTicketPriority = exports.SeverityLevelType = exports.SchemaPolicyLevel = exports.RuleInstanceSeverityLevel = exports.ResourceAssignmentModeType = exports.ProjectType = exports.ProjectAccessScope = exports.PermissionLevelType = exports.OrganizationAccessScope = exports.NativeFederationCompatibilityStatus = exports.GraphQlOperationType = exports.CriticalityLevel = exports.BreakingChangeFormulaType = exports.BillingPlanType = exports.BillingInvoiceStatus = exports.AuthProviderType = exports.AppDeploymentStatus = exports.AlertType = exports.AlertChannelType = void 0;
var AlertChannelType;
(function (AlertChannelType) {
    AlertChannelType["MsteamsWebhook"] = "MSTEAMS_WEBHOOK";
    AlertChannelType["Slack"] = "SLACK";
    AlertChannelType["Webhook"] = "WEBHOOK";
})(AlertChannelType || (exports.AlertChannelType = AlertChannelType = {}));
var AlertType;
(function (AlertType) {
    AlertType["SchemaChangeNotifications"] = "SCHEMA_CHANGE_NOTIFICATIONS";
})(AlertType || (exports.AlertType = AlertType = {}));
var AppDeploymentStatus;
(function (AppDeploymentStatus) {
    AppDeploymentStatus["Active"] = "active";
    AppDeploymentStatus["Pending"] = "pending";
    AppDeploymentStatus["Retired"] = "retired";
})(AppDeploymentStatus || (exports.AppDeploymentStatus = AppDeploymentStatus = {}));
var AuthProviderType;
(function (AuthProviderType) {
    AuthProviderType["Github"] = "GITHUB";
    AuthProviderType["Google"] = "GOOGLE";
    /** OpenID Connect */
    AuthProviderType["Oidc"] = "OIDC";
    /** Username-Password-Authentication */
    AuthProviderType["UsernamePassword"] = "USERNAME_PASSWORD";
})(AuthProviderType || (exports.AuthProviderType = AuthProviderType = {}));
var BillingInvoiceStatus;
(function (BillingInvoiceStatus) {
    BillingInvoiceStatus["Draft"] = "DRAFT";
    BillingInvoiceStatus["Open"] = "OPEN";
    BillingInvoiceStatus["Paid"] = "PAID";
    BillingInvoiceStatus["Uncollectible"] = "UNCOLLECTIBLE";
    BillingInvoiceStatus["Void"] = "VOID";
})(BillingInvoiceStatus || (exports.BillingInvoiceStatus = BillingInvoiceStatus = {}));
var BillingPlanType;
(function (BillingPlanType) {
    BillingPlanType["Enterprise"] = "ENTERPRISE";
    BillingPlanType["Hobby"] = "HOBBY";
    BillingPlanType["Pro"] = "PRO";
})(BillingPlanType || (exports.BillingPlanType = BillingPlanType = {}));
var BreakingChangeFormulaType;
(function (BreakingChangeFormulaType) {
    BreakingChangeFormulaType["Percentage"] = "PERCENTAGE";
    BreakingChangeFormulaType["RequestCount"] = "REQUEST_COUNT";
})(BreakingChangeFormulaType || (exports.BreakingChangeFormulaType = BreakingChangeFormulaType = {}));
var CriticalityLevel;
(function (CriticalityLevel) {
    /** @deprecated Use 'SeverityLevelType' instead. This field will be removed once it is no longer in use by a client. */
    CriticalityLevel["Breaking"] = "Breaking";
    /** @deprecated Use 'SeverityLevelType' instead. This field will be removed once it is no longer in use by a client. */
    CriticalityLevel["Dangerous"] = "Dangerous";
    /** @deprecated Use 'SeverityLevelType' instead. This field will be removed once it is no longer in use by a client. */
    CriticalityLevel["Safe"] = "Safe";
})(CriticalityLevel || (exports.CriticalityLevel = CriticalityLevel = {}));
var GraphQlOperationType;
(function (GraphQlOperationType) {
    GraphQlOperationType["Mutation"] = "MUTATION";
    GraphQlOperationType["Query"] = "QUERY";
    GraphQlOperationType["Subscription"] = "SUBSCRIPTION";
})(GraphQlOperationType || (exports.GraphQlOperationType = GraphQlOperationType = {}));
var NativeFederationCompatibilityStatus;
(function (NativeFederationCompatibilityStatus) {
    NativeFederationCompatibilityStatus["Compatible"] = "COMPATIBLE";
    NativeFederationCompatibilityStatus["Incompatible"] = "INCOMPATIBLE";
    NativeFederationCompatibilityStatus["NotApplicable"] = "NOT_APPLICABLE";
    NativeFederationCompatibilityStatus["Unknown"] = "UNKNOWN";
})(NativeFederationCompatibilityStatus || (exports.NativeFederationCompatibilityStatus = NativeFederationCompatibilityStatus = {}));
var OrganizationAccessScope;
(function (OrganizationAccessScope) {
    OrganizationAccessScope["Delete"] = "DELETE";
    OrganizationAccessScope["Integrations"] = "INTEGRATIONS";
    OrganizationAccessScope["Members"] = "MEMBERS";
    OrganizationAccessScope["Read"] = "READ";
    OrganizationAccessScope["Settings"] = "SETTINGS";
})(OrganizationAccessScope || (exports.OrganizationAccessScope = OrganizationAccessScope = {}));
var PermissionLevelType;
(function (PermissionLevelType) {
    PermissionLevelType["AppDeployment"] = "APP_DEPLOYMENT";
    PermissionLevelType["Organization"] = "ORGANIZATION";
    PermissionLevelType["Project"] = "PROJECT";
    PermissionLevelType["Service"] = "SERVICE";
    PermissionLevelType["Target"] = "TARGET";
})(PermissionLevelType || (exports.PermissionLevelType = PermissionLevelType = {}));
var ProjectAccessScope;
(function (ProjectAccessScope) {
    ProjectAccessScope["Alerts"] = "ALERTS";
    ProjectAccessScope["Delete"] = "DELETE";
    ProjectAccessScope["OperationsStoreRead"] = "OPERATIONS_STORE_READ";
    ProjectAccessScope["OperationsStoreWrite"] = "OPERATIONS_STORE_WRITE";
    ProjectAccessScope["Read"] = "READ";
    ProjectAccessScope["Settings"] = "SETTINGS";
})(ProjectAccessScope || (exports.ProjectAccessScope = ProjectAccessScope = {}));
var ProjectType;
(function (ProjectType) {
    ProjectType["Federation"] = "FEDERATION";
    ProjectType["Single"] = "SINGLE";
    ProjectType["Stitching"] = "STITCHING";
})(ProjectType || (exports.ProjectType = ProjectType = {}));
var ResourceAssignmentModeType;
(function (ResourceAssignmentModeType) {
    /** Apply to all subresouces of the resource. */
    ResourceAssignmentModeType["All"] = "ALL";
    /** Apply to specific subresouces of the resource. */
    ResourceAssignmentModeType["Granular"] = "GRANULAR";
})(ResourceAssignmentModeType || (exports.ResourceAssignmentModeType = ResourceAssignmentModeType = {}));
var RuleInstanceSeverityLevel;
(function (RuleInstanceSeverityLevel) {
    RuleInstanceSeverityLevel["Error"] = "ERROR";
    RuleInstanceSeverityLevel["Off"] = "OFF";
    RuleInstanceSeverityLevel["Warning"] = "WARNING";
})(RuleInstanceSeverityLevel || (exports.RuleInstanceSeverityLevel = RuleInstanceSeverityLevel = {}));
var SchemaPolicyLevel;
(function (SchemaPolicyLevel) {
    SchemaPolicyLevel["Organization"] = "ORGANIZATION";
    SchemaPolicyLevel["Project"] = "PROJECT";
})(SchemaPolicyLevel || (exports.SchemaPolicyLevel = SchemaPolicyLevel = {}));
/** Describes the impact of a schema change. */
var SeverityLevelType;
(function (SeverityLevelType) {
    /** The change will definetly break GraphQL client users. */
    SeverityLevelType["Breaking"] = "BREAKING";
    /**
     * The change might break existing clients that do not follow
     * best-practises such as future-proof enums or future-proof interface/union type usages.
     */
    SeverityLevelType["Dangerous"] = "DANGEROUS";
    /** The change is safe and does not break existing clients. */
    SeverityLevelType["Safe"] = "SAFE";
})(SeverityLevelType || (exports.SeverityLevelType = SeverityLevelType = {}));
var SupportTicketPriority;
(function (SupportTicketPriority) {
    SupportTicketPriority["High"] = "HIGH";
    SupportTicketPriority["Normal"] = "NORMAL";
    SupportTicketPriority["Urgent"] = "URGENT";
})(SupportTicketPriority || (exports.SupportTicketPriority = SupportTicketPriority = {}));
var SupportTicketStatus;
(function (SupportTicketStatus) {
    SupportTicketStatus["Open"] = "OPEN";
    SupportTicketStatus["Solved"] = "SOLVED";
})(SupportTicketStatus || (exports.SupportTicketStatus = SupportTicketStatus = {}));
var TargetAccessScope;
(function (TargetAccessScope) {
    TargetAccessScope["Delete"] = "DELETE";
    TargetAccessScope["Read"] = "READ";
    TargetAccessScope["RegistryRead"] = "REGISTRY_READ";
    TargetAccessScope["RegistryWrite"] = "REGISTRY_WRITE";
    TargetAccessScope["Settings"] = "SETTINGS";
    TargetAccessScope["TokensRead"] = "TOKENS_READ";
    TargetAccessScope["TokensWrite"] = "TOKENS_WRITE";
})(TargetAccessScope || (exports.TargetAccessScope = TargetAccessScope = {}));
var UsageRateLimitType;
(function (UsageRateLimitType) {
    UsageRateLimitType["MonthlyLimited"] = "MONTHLY_LIMITED";
    UsageRateLimitType["MonthlyQuota"] = "MONTHLY_QUOTA";
    UsageRateLimitType["Unlimited"] = "UNLIMITED";
})(UsageRateLimitType || (exports.UsageRateLimitType = UsageRateLimitType = {}));
