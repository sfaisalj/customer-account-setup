import LocalForage from 'localforage';
import InMemoryLRUCache from '@graphql-mesh/cache-inmemory-lru';
export default class LocalforageCache {
    constructor(config) {
        const driverNames = config?.driver || ['INDEXEDDB', 'WEBSQL', 'LOCALSTORAGE'];
        if (driverNames.every(driverName => !LocalForage.supports(driverName))) {
            return new InMemoryLRUCache({ pubsub: config?.pubsub });
        }
        this.localforage = LocalForage.createInstance({
            name: config?.name || 'graphql-mesh-cache',
            storeName: config?.storeName || 'graphql-mesh-cache-store',
            driver: driverNames.map(driverName => LocalForage[driverName] ?? driverName),
            size: config?.size,
            version: config?.version,
            description: config?.description,
        });
    }
    get(key) {
        const getItem = () => this.localforage.getItem(key.toString());
        return this.localforage.getItem(`${key}.expiresAt`).then(expiresAt => {
            if (expiresAt && Date.now() > expiresAt) {
                return this.localforage.removeItem(key).then(() => getItem());
            }
            return getItem();
        });
    }
    getKeysByPrefix(prefix) {
        return this.localforage.keys().then(keys => keys.filter(key => key.startsWith(prefix)));
    }
    set(key, value, options) {
        const jobs = [this.localforage.setItem(key, value)];
        if (options?.ttl) {
            jobs.push(this.localforage.setItem(`${key}.expiresAt`, Date.now() + options.ttl * 1000));
        }
        return Promise.all(jobs).then(() => undefined);
    }
    delete(key) {
        return this.localforage.removeItem(key).then(() => true, () => false);
    }
}
