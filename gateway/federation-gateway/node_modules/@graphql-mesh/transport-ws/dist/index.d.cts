import * as _graphql_mesh_transport_common from '@graphql-mesh/transport-common';
import { DisposableExecutor } from '@graphql-mesh/transport-common';
import { Client } from 'graphql-ws';

interface WSTransportOptions {
    /**
     * Interpolated additional parameters, passed through the `payload` field with the `ConnectionInit` message,
     * that the client specifies when establishing a connection with the server. You can use this
     * for securely passing arguments for authentication.
     */
    connectionParams?: Record<string, string>;
}
declare const _default: {
    getSubgraphExecutor({ transportEntry, logger }: _graphql_mesh_transport_common.TransportGetSubgraphExecutorOptions<WSTransportOptions>, onClient?: (client: Client) => void): DisposableExecutor & AsyncDisposable;
};

export { type WSTransportOptions, _default as default };
