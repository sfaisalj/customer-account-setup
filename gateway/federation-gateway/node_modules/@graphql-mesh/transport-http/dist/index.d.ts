import * as _whatwg_node_promise_helpers from '@whatwg-node/promise-helpers';
import * as _graphql_tools_utils from '@graphql-tools/utils';
import { ExecutionRequest } from '@graphql-tools/utils';
import * as _graphql_mesh_transport_common from '@graphql-mesh/transport-common';
import { TransportEntry } from '@graphql-mesh/transport-common';
import { HTTPExecutorOptions } from '@graphql-tools/executor-http';

type HTTPTransportOptions<TSubscriptionTransportOptions extends Record<string, any> = Record<string, any>> = Pick<HTTPExecutorOptions, 'useGETForQueries' | 'method' | 'timeout' | 'credentials' | 'retry' | 'apq'> & {
    subscriptions?: TransportEntry<TSubscriptionTransportOptions>;
};
declare const _default: {
    getSubgraphExecutor(payload: _graphql_mesh_transport_common.TransportGetSubgraphExecutorOptions<HTTPTransportOptions<Record<string, any>>>): (<TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends Record<string, any> = Record<string, any>, TRoot = any, TExtensions extends Record<string, any> = Record<string, any>>(executionRequest: ExecutionRequest) => _whatwg_node_promise_helpers.MaybePromise<_graphql_tools_utils.MaybeAsyncIterable<_graphql_tools_utils.ExecutionResult<any, any>>>) & AsyncDisposable;
};

export { type HTTPTransportOptions, _default as default };
